---
# Copyright (c) Ansible Project
# GNU General Public License v3.0+ (see LICENSES/GPL-3.0-or-later.txt or https://www.gnu.org/licenses/gpl-3.0.txt)
# SPDX-License-Identifier: GPL-3.0-or-later


## Setting the Credentials will always return with state change

- name: Desired User with Credentials
  community.general.keycloak_user: "{{ auth_args | combine(call_args) }}"
  vars:
    call_args:
      realm: "{{ realm }}"
      name: "{{ username }}"
      state: present
      first_name: "{{ first_name }}"
      last_name: "{{ last_name }}"
      email: "{{ email }}"
      email_verified: "{{ email_verified}}"
      enabled: "{{ enabled }}"
      credentials: "{{ credentials }}"
      attributes: "{{ attributes }}"
  register: desire_user_with_creds_not_present

- name: Desire user again with same props
  community.general.keycloak_user: "{{ auth_args | combine(call_args) }}"
  vars:
    call_args:
      realm: "{{ realm }}"
      name: "{{ username }}"
      state: present
      first_name: "{{ first_name }}"
      last_name: "{{ last_name }}"
      email: "{{ email }}"
      email_verified: "{{ email_verified}}"
      enabled: "{{ enabled }}"
      credentials: "{{ credentials }}"
      attributes: "{{ attributes }}"
  register: desire_user_with_creds_when_present_and_same

- name: Check User again with same props
  community.general.keycloak_user: "{{ auth_args | combine(call_args) }}"
  check_mode: yes
  vars:
    call_args:
      realm: "{{ realm }}"
      name: "{{ username }}"
      state: present
      first_name: "{{ first_name }}"
      last_name: "{{ last_name }}"
      email: "{{ email }}"
      email_verified: "{{ email_verified}}"
      enabled: "{{ enabled }}"
      credentials: "{{ credentials }}"
      attributes: "{{ attributes }}"
  register: check_user_with_creds_when_present_and_same

- name: Get Token (Check with Credentials)
  ansible.builtin.uri:
    url: "{{url}}/realms/{{realm}}/protocol/openid-connect/token"
    body_format: form-urlencoded
    method: POST
    body:
      username: "{{username}}"
      password: "{{password}}"
      client_id: "admin-cli"
      grant_type: "password"
  no_log: True
  register: check_user_credentials_by_fetching_access_token
  